<UserControl
    x:Class="IntensityProfileViewer.ImagePresentationSettings_UserControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:IntensityProfileViewer"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    d:DesignHeight="300"
    d:DesignWidth="300"
    x:DefaultBindMode="OneWay"
  >

  <!-- MATTEO : is it recommended to *always* have a grid at the root ?? -->
  <!-- MATTEO : How come the Height turns out OK at runtime ?? -->
  <!-- MATTEO : What determines the Width at runtime ?? -->

  <Grid>

    <StackPanel 
      Orientation="Vertical" 
      Padding="10" Spacing="10" 
      Background="{StaticResource SettingsPanelBackgroundBrush}"
    >

      <!-- 
        Matteo : 
        TextBlock with border is verbose, but it works - pity there isn't a Background property as there is in TextBox
        TextBox in 'read-only' mode is misaligned ???
      -->

      <!-- HorizontalAlignment="Center" ???? -->
      <Border 
        Grid.Row="0"
        Grid.Column="0"
        Background="{StaticResource LabelBackgroundBrush}" 
      >
        <TextBlock 
          Text="Image presentation settings" 
          Height="Auto" 
          Margin="6"
        />
      </Border>

      <!-- 
      <TextBox 
        Text="Image presentation settings" 
        HorizontalAlignment="Center" 
        VerticalAlignment="Center"
        VerticalContentAlignment="Center"
        BorderThickness="0"
        IsReadOnly="true" 
        Background="{StaticResource LabelBackgroundBrush}" 
      />
      -->

      <ComboBox 
        Header="Colour map" 
        HorizontalAlignment="Stretch" 
        Background="{StaticResource LabelBackgroundBrush}" 
        ItemsSource="{x:Bind ColourMapBindingHelper.OptionNames}"
        SelectedValue="{x:Bind ColourMapBindingHelper.GetOptionName(ViewModel.ColourMapOption), BindBack=ColourMapBindingHelper.SetOptionFromName, Mode=TwoWay}"
      />

      <ComboBox 
        Header="Normalisation mode" 
        HorizontalAlignment="Stretch" 
        Background="{StaticResource LabelBackgroundBrush}" 
        ItemsSource="{x:Bind NormalisationModeBindingHelper.OptionNames}"
        SelectedValue="{x:Bind NormalisationModeBindingHelper.GetOptionName(ViewModel.NormalisationMode), BindBack=NormalisationModeBindingHelper.SetOptionFromName, Mode=TwoWay}"
      />

       <!-- Matteo : how to get some 'header' text shown at design time ?? -->
       <!-- TargetNullValue ?? -->

       <Slider 
         Header="{x:Bind GetNormalisationValueHeaderText(ViewModel.NormalisationValue)}"
         HorizontalAlignment="Stretch"
         Minimum="{x:Bind NormalisationValueBindingHelper.Minimum}" 
         Maximum="{x:Bind NormalisationValueBindingHelper.Maximum}" 
         Value="{x:Bind NormalisationValueBindingHelper.GetValue(ViewModel.NormalisationValue), BindBack=NormalisationValueBindingHelper.SetValue, Mode=TwoWay}"
         IsEnabled="{x:Bind ViewModel.CanSetNormalisationValue, Mode=OneWay}"
       />

      <!-- 
         Value="{x:Bind ViewModel.NormalisationValue, BindBack=SetNormalisationValue, Mode=TwoWay}"
         ValueChanged="m_normalisationValueSlider_ValueChanged"
       <Slider 
         x:Name="m_normalisationValueSlider"
         HorizontalAlignment="Left"
         Minimum="0" Maximum="255" Width="160" 
         Header="Normalisation value"
         Value="{x:Bind ViewModel.NormalisationValue}"
         ValueChanged="m_normalisationValueSlider_ValueChanged"
         IsEnabled="{x:Bind ViewModel.CanSetNormalisationValue, Mode=OneWay}"
       />
       -->

       <!-- 
         To make x:Bind work with Mode=TwoWay, it seems that the main 'source'
         for the x:Bind has to specify a function call (here 'GetNormalisationValue()')
         rather than the property itself. If we just specify 
           x:Bind ViewModel.NormalisationValue
         we get a compile time error, 'Unexpected BindBack found'.
         Although maybe that's due to the mismatch between the Value type,
         which is 'double', and the Normalisation Value which is 'byte'.
       -->

       <!-- old version 
      <Slider 
         Header="Normalisation value 1"
         Width="160" HorizontalAlignment="Left"
         Minimum="0" Maximum="255" 
         Value="{x:Bind GetNormalisationValue(ViewModel.NormalisationValue), BindBack=SetNormalisationValue, Mode=TwoWay}"
         IsEnabled="{x:Bind ViewModel.CanSetNormalisationValue, Mode=OneWay}"
       />
       -->

    </StackPanel>

  </Grid>

</UserControl>
