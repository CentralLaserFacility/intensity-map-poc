<UserControl
    x:Class="Experiments_01_UWP.ScrollViewerPanAndZoomExperiment_UserControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:Experiments_01_UWP"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    d:DesignHeight="900"
    d:DesignWidth="1200"
>

  <!-- Matteo : designer is showing grid lines in odd places ?? -->
  <!-- Matteo : what determines the size assigned ?? (OK, yes, it's complicated !!!) -->
  <!-- Is there a default DesignHeight of 1000 ??? That seems to be that value taken if I remove the definition above -->

  <Grid Background="AliceBlue" Padding="10" RowSpacing="10" ColumnSpacing="10" >

    <!-- MATTEO !!! : row #1 can be fixed height, but want row #0 to take all available space ... ???? -->
    <!-- MATTEO : defaults for XAML properties ... documented anywhere ??? -->
    <!-- For example, what is the default for Height in a RowDefinition ??? Is it * or Auto or what ??? -->

    <Grid.RowDefinitions>
      <RowDefinition Height="600" />
      <RowDefinition Height="200"/>
    </Grid.RowDefinitions>

    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="*"/>
      <ColumnDefinition Width="*"/>
    </Grid.ColumnDefinitions>

    <!-- Matteo : 'Name' vs 'x:Name' ??? -->
    <!-- Should we use x:Name everywhere, or is Name still relevant ??? -->

    <!-- 
      Hmm, Tine reckons this pan/zoom behaviour is 'good enough' ... 
      The limitations are :
        You can pan, but only using the scroll bars - mouse dragging has no effect.
        Can zoom in and out (around the mouse position) using CTRL-WHEEL,
        and this works fine for zooming in ; but when you zoom out, 
        the reference point moves away from the expected position.
      Matteo : Would a GestureRecogniser give us the flexibility to fix this,
      or would we be fighting 'standard behaviour' that's built into UWP ??
      [ OK, I've now got the Gesture Recogniser sussed ... ]
      MATTEO : Is there an easy way to make this work the way we want ??
      Effectively with an 'infinite' canvas that you can pan and zoom
    -->

    <ScrollViewer 
      x:Name="m_scrollViewer"
      Grid.Row="0" Grid.Column="0" 
      VerticalScrollBarVisibility="Visible"
      HorizontalScrollBarVisibility="Visible"
      ZoomMode="Enabled"
    >
      <!-- 
        Aha, need to embed the Canvas inside something 
        that has a well defined Size, such as this Grid.
        Curiously, without a Grid we get the Vertical scroll bar
        showing, but not the Horizontal one ...

        *** MATTEO ...
        *** In this scenario we're specifying the size of the Grid.
        *** In other scenarios, the Grid gets its Size from its Children ???
        *** What are the rules here ??? OK, it's complicated !!
      -->
      <Grid Width="800" Height="800">
        <Canvas 
          x:Name="m_canvas"
          Background="BlanchedAlmond"
          local:ClipToBoundsHelper.ClipToBounds="False"
        >
          <Rectangle Fill="LightGreen" Width="100" Height="100" Margin="10,10,0,0"/>
          <Rectangle Fill="Red" Width="200" Height="100" Margin="10,120,0,0"/>
          <Rectangle Fill="LightGreen" Width="700" Height="100" Margin="10,230,0,0"/>
        </Canvas>
      </Grid>
    </ScrollViewer>

    <Rectangle Grid.Row="1" Grid.Column="0" Fill="CornflowerBlue" />

    <!--
    <local:CanvasPanAndZoomExperiment_UserControl 
    -->
    <local:NestedCanvasPanAndZoomExperiment_UserControl 
      HorizontalAlignment="Stretch"
      VerticalAlignment="Stretch"
      x:Name="m_transformedCanvas"
      Grid.Row="0" Grid.Column="1"
    />

    <local:PanAndZoomSliders_UserControl 
      x:Name="m_panAndZoomSliders"
      Grid.Row="1" Grid.Column="0" 
    />

    <!-- 
    <Rectangle Grid.Row="1" Grid.Column="1" Fill="CornflowerBlue" />
    -->

    <!-- 
    <local:MouseEventHandlerTest_UserControl Grid.Row="1" Grid.Column="1" />
    -->

    <local:PointerEventHandler_UserControl Grid.Row="1" Grid.Column="1" />

  </Grid>
</UserControl>
