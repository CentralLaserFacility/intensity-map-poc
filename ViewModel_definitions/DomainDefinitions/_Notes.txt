//
// _Notes.txt
//

This project defines interfaces and enumerated types pertaining to the IntensityMapViewer.

There are 'ViewModel' types, and 'Model' types. 

The ViewModel classes will act as data-binding sources for the corresponding 'View' classes,
which render the ViewModel properties as visual elements.

In a 'real' application a ViewModel class will often connect to a corresponding 'Model' class,
but here we're simplifying things and putting all the functionality in the ViewModels.

Hmm, it might have been better to avoid the term 'ViewModel' in the names, and just
treat them as 'observable objects' ?? But that could cause confusion further down the line
when we probably will have distinct 'Model' and 'ViewModel' classes.

We use interfaces for pretty much everything :
- so that we can easily swap in different implementations when we move
  from the 'proof-of-concept' demo to a 'real' Viewer that works with live data.
- so that we can use 'mocks' in tests.
- so we can avoid the use of 'static' for singletons.




